1. Fetching Trading Pairs 
This function sends a request to the API URL to retrieve the latest trading pairs from the exchange's API. 
It then parses the JSON response and returns it for further processing.

# Make a get request
def get_coin_tickers(url):
    req = requests.get(url)
    json_resp = json.loads(req.text)
    return json_resp

This function filters the fetched trading pairs to identify those that end with a specific currency I'm looking for (e.g., USD). 
It compiles a list of these pairs, which are potential candidates for triangular arbitrage.
# Loop through each objects and find the trade able pairs
def collect_tradeables(json_obj, ending_currency):
    coin_list = []
    for pair_name, pair_info in json_obj["result"].items():
        if pair_info["wsname"] == pair_name and pair_info["altname"].endswith(ending_currency):
            coin_list.append(pair_info["wsname"])
    return coin_list

# Structure Arbitrage Pairs
def structure_triangular_pairs(coin_list):
    # Declare Variables
    triangular_pairs_list = []
    remove_duplicates_list = []
    pairs_list = coin_list[0:]

# Example:
symbols = ["BTC/USD", "USD/ETH", "ETH/BTC"]
pairs = find_triangular_pairs(symbols)
print("Possible Triangular Pairs:", pairs)

2. Price Checking Logic
This function retrieves the current bid and ask prices for each of the three pairs in a triangular set. 
These prices are crucial for calculating potential profits from arbitrage opportunities.
  
# Structure Prices
def get_price_for_t_pair(t_pair, prices_json):
    # Extract Pair Info
    pair_a = t_pair["pair_a"]
    pair_b = t_pair["pair_b"]
    pair_c = t_pair["pair_c"]

    # Extract Price Information for Given Pairs
    pair_a_ask = float(prices_json[pair_a]["lowestAsk"])
    pair_a_bid = float(prices_json[pair_a]["highestBid"])
    pair_b_ask = float(prices_json[pair_b]["lowestAsk"])
    pair_b_bid = float(prices_json[pair_b]["highestBid"])
    pair_c_ask = float(prices_json[pair_c]["lowestAsk"])
    pair_c_bid = float(prices_json[pair_c]["highestBid"])

    # Output Dictionary
    return {
        "pair_a_ask": pair_a_ask,
        "pair_a_bid": pair_a_bid,
        "pair_b_ask": pair_b_ask,
        "pair_b_bid": pair_b_bid,
        "pair_c_ask": pair_c_ask,
        "pair_c_bid": pair_c_bid
    }
  
3. Identifying Profitable Triangular Opportunities
This part of the code checks if the identified triangular pair is unique and hasn't been evaluated before.
If it's a new combination, it adds it to the list of potential arbitrage opportunities for further analysis.
This is an incredibly important condition. I'm teaching the bot to find unique arbitrage opportunities, which can be analyzed later if they are worth executing.

# Determining Triangular Match
   if counts_c_base == 2 and counts_c_quote == 2 and c_base != c_quote:
      combined = pair_a + "," + pair_b + "," + pair_c
      unique_item = ''.join(sorted(combine_all))

   if unique_item not in remove_duplicates_list:
      match_dict = {
       "a_base": a_base,
       "b_base": b_base,
       "c_base": c_base,
       "a_quote": a_quote,
       "b_quote": b_quote,
       "c_quote": c_quote,
       "pair_a": pair_a,
       "pair_b": pair_b,
       "pair_c": pair_c,
       "combined": combined
     }
   triangular_pairs_list.append(match_dict)
   remove_duplicates_list.append(unique_item)

    # Return result
    return triangular_pairs_list
